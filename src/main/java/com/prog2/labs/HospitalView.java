package com.prog2.labs;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author natha
 */
public class HospitalView extends javax.swing.JFrame implements PatientListener {

    private HospitalController controller;
    static DefaultListModel listModel = new DefaultListModel();
    private ResourceBundle messages;

    /**
     * Creates new form HostpitalRecordsFrame
     */
    public HospitalView() {
        initComponents();
        DatabaseUtil.initializeDB();
        controller = new HospitalController();
        controller.addPatientListener(this); // register as listener
        displayRecordsFromDB();
    }

    private void updateLocale(Locale locale) {
        this.messages = ResourceBundle.getBundle("Messages", locale);
        localize();
    }

    private void localize() {
        jLabel1.setText(messages.getString("hospitalRecords"));
        addRecordBtn.setText(messages.getString("addPatient"));
        enBtn.setText(messages.getString("english"));
        frBtn.setText(messages.getString("french"));
        deleteRecordBTN.setText(messages.getString("deleteBTN"));
        searchLabel.setText(messages.getString("searchLabel"));
        searchButton.setText(messages.getString("searchBTN"));

    }

    @Override
    public void addPatient(Patient patient) {
        if (patient == null) {
            JOptionPane.showMessageDialog(this, "Failed to add patient due to an internal error.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if the patient already exists in the list
        if (!listModel.contains(patient.toString())) {
            // If the patient is not already in the list, add them
            listModel.addElement(patient.toString());
        }
    }

    private void displayRecordsFromDB() {
        List<Patient> patients = DatabaseUtil.getPatients(); // Fetch patients from the database
        listModel.clear(); // Clear the existing list to avoid duplicates

        for (Patient patient : patients) {
            // Prepend the patient ID for identification in the list, followed by the full patient details from toString()
            String entry = "ID: " + patient.getPatientID() + " - " + patient.toString();
            listModel.addElement(entry);
        }
        patientList.setModel(listModel); // Update the JList with the new model
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        enBtn = new javax.swing.JRadioButton();
        frBtn = new javax.swing.JRadioButton();
        addRecordBtn = new javax.swing.JButton();
        searchInput = new javax.swing.JTextField();
        searchLabel = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        deleteRecordBTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        patientList.setModel(listModel);
        jScrollPane1.setViewportView(patientList);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Hospital Records");

        buttonGroup1.add(enBtn);
        enBtn.setForeground(new java.awt.Color(0, 0, 0));
        enBtn.setSelected(true);
        enBtn.setText("English");
        enBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enBtnActionPerformed(evt);
            }
        });

        buttonGroup1.add(frBtn);
        frBtn.setForeground(new java.awt.Color(0, 0, 0));
        frBtn.setText("French");
        frBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frBtnActionPerformed(evt);
            }
        });

        addRecordBtn.setForeground(new java.awt.Color(0, 0, 0));
        addRecordBtn.setText("Add Record");
        addRecordBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRecordBtnActionPerformed(evt);
            }
        });

        searchLabel.setText("Search a Patient: ");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        deleteRecordBTN.setText("Delete Record");
        deleteRecordBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRecordBTNActionPerformed(evt);
            }
        });

        jDesktopPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(enBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(frBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(addRecordBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(searchInput, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(searchLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(searchButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(deleteRecordBTN, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(searchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17))
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addComponent(frBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addComponent(enBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 155, Short.MAX_VALUE)
                        .addComponent(addRecordBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(deleteRecordBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(116, 116, 116))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(231, 231, 231))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enBtn)
                    .addComponent(addRecordBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteRecordBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(frBtn)
                .addGap(18, 18, 18)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchLabel)
                    .addComponent(searchButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void enBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enBtnActionPerformed
        // TODO add your handling code here:
        updateLocale(Locale.ENGLISH);
    }//GEN-LAST:event_enBtnActionPerformed

    private void frBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frBtnActionPerformed
        // TODO add your handling code here:
        updateLocale(Locale.FRANCE);

    }//GEN-LAST:event_frBtnActionPerformed

    private void addRecordBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRecordBtnActionPerformed
        // TODO add your handling code here:
        PatientForm vw = new PatientForm(this, this.controller);
        vw.setVisible(true);
    }//GEN-LAST:event_addRecordBtnActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        String searchQuery = searchInput.getText();
        if (searchQuery.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter search criteria", "Search Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        List<Patient> searchResults = controller.searchPatients(searchQuery);
        listModel.clear(); // Clear existing list
        for (Patient patient : searchResults) {
            listModel.addElement("ID: " + patient.getPatientID() + "      First Name: " + patient.getFirstName()
                    + " Last Name " + patient.getLastName() + "      Age: " + patient.getAge()
                    + "       Height: " + patient.getHeight() + "cm" + "        Weight: "
                    + patient.getWeight() + "kg" + "      Illness: " + patient.getIllness()
                    + "     Doctor: " + patient.getDoctor());
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void deleteRecordBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRecordBTNActionPerformed
        int[] selectedIndices = patientList.getSelectedIndices();
        if (selectedIndices.length == 0) {
            JOptionPane.showMessageDialog(this, "Please select one or more patients to delete.", "No Patient Selected", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Confirm deletion
        int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the selected patient(s)?", "Confirm Deletion", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (response != JOptionPane.YES_OPTION) {
            return; // Stop if the user does not confirm
        }

        // Attempt to delete each selected patient
        List<Integer> idsToDelete = new ArrayList<>();
        for (int index : selectedIndices) {
            String selectedPatient = patientList.getModel().getElementAt(index);
            int delimiterIndex = selectedPatient.indexOf(" -");
            if (delimiterIndex == -1) {
                JOptionPane.showMessageDialog(this, "Some selected patients' information is formatted incorrectly.", "Format Error", JOptionPane.ERROR_MESSAGE);
                return; // Exit if any format is incorrect
            }
            try {
                int patientID = Integer.parseInt(selectedPatient.substring(4, delimiterIndex));
                idsToDelete.add(patientID);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Failed to parse patient ID from selection.", "Parsing Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        // Now delete each patient by ID from the database
        boolean allDeleted = true;
        for (int patientID : idsToDelete) {
            if (!controller.deletePatient(patientID)) {
                allDeleted = false; // If any delete fails, mark the flag
            }
        }

        if (allDeleted) {
            // Remove all selected indices from list model, starting from the end to avoid shifting indices
            for (int i = selectedIndices.length - 1; i >= 0; i--) {
                listModel.removeElementAt(selectedIndices[i]);
            }
            JOptionPane.showMessageDialog(this, "Selected patient records deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Failed to delete some or all selected patient records.", "Partial or No Deletion", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteRecordBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HospitalView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HospitalView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HospitalView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HospitalView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HospitalView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRecordBtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton deleteRecordBTN;
    private javax.swing.JRadioButton enBtn;
    private javax.swing.JRadioButton frBtn;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> patientList;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchInput;
    private javax.swing.JLabel searchLabel;
    // End of variables declaration//GEN-END:variables

}
